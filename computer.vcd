$date
	Tue Feb 28 15:56:49 2017
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module computer_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module U0 $end
$var wire 1 ! clock_50_b7a $end
$var wire 16 # RAMwrite [15:0] $end
$var wire 1 $ RAMwe $end
$var wire 16 % RAMread [15:0] $end
$var wire 2 & RAMbe [1:0] $end
$var wire 16 ' RAMaddr [15:0] $end
$var wire 16 ( CPUwrite [15:0] $end
$var wire 1 ) CPUwe $end
$var wire 16 * CPUread [15:0] $end
$var wire 2 + CPUbe [1:0] $end
$var wire 16 , CPUaddr [15:0] $end
$scope module cpu $end
$var wire 16 - MARin [15:0] $end
$var wire 16 . RAMaddr [15:0] $end
$var wire 16 / RAMin [15:0] $end
$var wire 1 ! clk $end
$var wire 3 0 f [2:0] $end
$var wire 16 1 regw [15:0] $end
$var wire 1 2 reset $end
$var wire 1 ) we $end
$var wire 3 3 state [2:0] $end
$var wire 3 4 regws [2:0] $end
$var wire 3 5 regr1s [2:0] $end
$var wire 16 6 regr1 [15:0] $end
$var wire 3 7 regr0s [2:0] $end
$var wire 16 8 regr0 [15:0] $end
$var wire 1 9 reg_load $end
$var wire 1 : ram_load $end
$var wire 2 ; op1s [1:0] $end
$var wire 2 < op0s [1:0] $end
$var wire 2 = mdrs [1:0] $end
$var wire 1 > mdr_load $end
$var wire 1 ? mar_load $end
$var wire 1 @ ir_load $end
$var wire 1 A incr_pc $end
$var wire 2 B byte_enable [1:0] $end
$var wire 16 C RAMout [15:0] $end
$var wire 16 D MDRout [15:0] $end
$var wire 16 E MARout [15:0] $end
$var wire 16 F IRout [15:0] $end
$var wire 13 G IRimm [12:0] $end
$var wire 16 H ALUout [15:0] $end
$var reg 16 I MDRin [15:0] $end
$var reg 16 J op0 [15:0] $end
$var reg 16 K op1 [15:0] $end
$scope module IR $end
$var wire 1 ! clk $end
$var wire 1 2 reset $end
$var wire 1 @ load $end
$var wire 16 L in [15:0] $end
$var reg 16 M out [15:0] $end
$upscope $end
$scope module MAR $end
$var wire 1 ! clk $end
$var wire 16 N in [15:0] $end
$var wire 1 2 reset $end
$var wire 1 ? load $end
$var reg 16 O out [15:0] $end
$upscope $end
$scope module MDR $end
$var wire 1 ! clk $end
$var wire 16 P in [15:0] $end
$var wire 1 2 reset $end
$var wire 1 > load $end
$var reg 16 Q out [15:0] $end
$upscope $end
$scope module alu $end
$var wire 3 R f [2:0] $end
$var wire 16 S x [15:0] $end
$var wire 16 T y [15:0] $end
$var reg 16 U out [15:0] $end
$upscope $end
$scope module decoder $end
$var wire 1 ! clk $end
$var wire 16 V instr [15:0] $end
$var wire 1 2 reset $end
$var wire 3 W tgt [2:0] $end
$var wire 3 X opc0 [2:0] $end
$var wire 3 Y next_state [2:0] $end
$var wire 8 Z imm7 [7:0] $end
$var wire 11 [ imm10 [10:0] $end
$var wire 3 \ arg1 [2:0] $end
$var wire 3 ] arg0 [2:0] $end
$var reg 2 ^ BYTE_ENABLE [1:0] $end
$var reg 1 A INCR_PC $end
$var reg 1 @ IR_LOAD $end
$var reg 13 _ IRimm [12:0] $end
$var reg 1 ? MAR_LOAD $end
$var reg 2 ` MDRS [1:0] $end
$var reg 1 > MDR_LOAD $end
$var reg 2 a OP0S [1:0] $end
$var reg 2 b OP1S [1:0] $end
$var reg 1 : RAM_LOAD $end
$var reg 3 c REGR0S [2:0] $end
$var reg 3 d REGR1S [2:0] $end
$var reg 3 e REGWS [2:0] $end
$var reg 1 9 REG_LOAD $end
$var reg 3 f state [2:0] $end
$scope function fsm_function $end
$var reg 4 g fsm_function [3:0] $end
$var reg 4 h state [3:0] $end
$upscope $end
$upscope $end
$scope module regfile $end
$var wire 1 ! clk $end
$var wire 1 A incr_pc $end
$var wire 3 i regr0s [2:0] $end
$var wire 3 j regr1s [2:0] $end
$var wire 16 k regw [15:0] $end
$var wire 3 l regws [2:0] $end
$var wire 1 2 reset $end
$var wire 1 9 we $end
$var reg 16 m R1 [15:0] $end
$var reg 16 n R2 [15:0] $end
$var reg 16 o R3 [15:0] $end
$var reg 16 p R4 [15:0] $end
$var reg 16 q R5 [15:0] $end
$var reg 16 r R6 [15:0] $end
$var reg 16 s R7 [15:0] $end
$var reg 16 t regr0 [15:0] $end
$var reg 16 u regr1 [15:0] $end
$upscope $end
$upscope $end
$scope module mem_io $end
$var wire 16 v CPUaddr [15:0] $end
$var wire 2 w CPUbe [1:0] $end
$var wire 16 x CPUread [15:0] $end
$var wire 1 ) CPUwe $end
$var wire 16 y CPUwrite [15:0] $end
$var wire 16 z RAMaddr [15:0] $end
$var wire 2 { RAMbe [1:0] $end
$var wire 1 $ RAMwe $end
$var wire 16 | RAMwrite [15:0] $end
$var wire 16 } addr [15:0] $end
$var wire 16 ~ RAMread [15:0] $end
$var reg 2 !" be [1:0] $end
$var reg 16 "" data [15:0] $end
$var reg 16 #" wdata [15:0] $end
$upscope $end
$scope module ram $end
$var wire 16 $" address [15:0] $end
$var wire 2 %" be [1:0] $end
$var wire 1 ! clk $end
$var wire 16 &" data_in [15:0] $end
$var wire 16 '" data_out [15:0] $end
$var wire 1 $ we $end
$var reg 16 (" temp [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx ("
bx '"
bx &"
bx %"
b0xxxxxxxxxxxxxxx $"
bx #"
bx ""
bx !"
bx ~
b0xxxxxxxxxxxxxxx }
bx |
bx {
b0xxxxxxxxxxxxxxx z
bx y
bx x
bx w
bx v
bx u
b0 t
b0 s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
b0 h
b1 g
b0 f
bx e
bx d
bx c
bx b
bx a
bx `
b0 _
bx ^
bx ]
bx \
b0xxxxxxxxxx [
b0xxxxxxx Z
b1 Y
bx X
bx W
bx V
bx U
bx T
bx S
bz R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
b0 G
bx F
bx E
bx D
bx C
bx B
0A
x@
0?
x>
bx =
bx <
bx ;
x:
09
b0 8
bx 7
bx 6
bx 5
bx 4
b0 3
z2
bx 1
bz 0
bx /
bx .
bx -
bx ,
bx +
bx *
x)
bx (
b0xxxxxxxxxxxxxxx '
bx &
bx %
x$
bx #
0"
0!
$end
#1
b0zzz h
bz 3
bz f
#5
1!
#10
0!
#11
b0 -
b0 N
b0 1
b0 k
b0 H
b0 U
b0 K
b0 T
b0 6
b0 u
b0 J
b0 S
b0 I
b0 P
b10 Y
1A
1?
b1 ;
b1 b
b111 5
b111 d
b111 j
b0 7
b0 c
b0 i
b0 <
b0 a
b0 =
b0 `
b11 +
b11 B
b11 ^
b11 w
1@
0$
0)
0:
0>
b10 g
b1 h
b1 3
b1 f
#15
b0 '
b0 z
b0 $"
b0 }
b0 ,
b0 .
b0 v
b0 E
b0 O
1!
#20
b10 -
b10 N
b10 1
b10 k
b10 H
b10 U
b10 K
b10 T
b10 6
b10 u
b10 s
0!
#21
b11 Y
0A
0?
b11 g
b10 h
b10 3
b10 f
#25
b1010001100100001 *
b1010001100100001 C
b1010001100100001 L
b1010001100100001 x
b1010001100100001 ""
b1010001100100001 %
b1010001100100001 ~
b1010001100100001 '"
b1010001100100001 ("
1!
#30
b1100100 I
b1100100 P
b1100100 G
b1100100 _
b101 X
b1100 Z
b1100100 [
b100 ]
b100 \
b1 W
b1010001100100001 F
b1010001100100001 M
b1010001100100001 V
0!
#31
bx -
bx N
bx 1
bx k
bx H
bx U
bx J
bx S
b100 Y
1>
b10 <
b10 a
0@
b100 g
b11 h
b11 3
b11 f
#35
b1100110 -
b1100110 N
b1100110 1
b1100110 k
b1100110 H
b1100110 U
b1100100 J
b1100100 S
b1100100 (
b1100100 /
b1100100 y
b1100100 D
b1100100 Q
1!
#40
0!
#41
b101 Y
0>
b101 g
b100 h
b100 3
b100 f
#45
1!
#50
0!
#51
b110 Y
b110 g
b101 h
b101 3
b101 f
#55
1!
#60
0!
#61
b1100100 -
b1100100 N
b1100100 1
b1100100 k
b1100100 H
b1100100 U
b0 K
b0 T
b0 6
b0 u
b111 Y
19
b1 4
b1 e
b1 l
b0 5
b0 d
b0 j
b111 g
b110 h
b110 3
b110 f
#65
1!
#70
b1100100 m
0!
#71
b1 Y
09
b1 g
b111 h
b111 3
b111 f
#75
1!
#80
0!
#81
b10 K
b10 T
b10 -
b10 N
b10 1
b10 k
b10 H
b10 U
b10 6
b10 u
b0 J
b0 S
b10 Y
1@
1A
1?
b111 5
b111 d
b111 j
b0 <
b0 a
b10 g
b1 h
b1 3
b1 f
#85
b1 '
b1 z
b1 $"
b1 }
b10 ,
b10 .
b10 v
b10 E
b10 O
1!
#90
b100 -
b100 N
b100 1
b100 k
b100 H
b100 U
b100 K
b100 T
b100 6
b100 u
b100 s
0!
#91
b11 Y
0A
0?
b11 g
b10 h
b10 3
b10 f
#95
b100110010000001 *
b100110010000001 C
b100110010000001 L
b100110010000001 x
b100110010000001 ""
b100110010000001 %
b100110010000001 ~
b100110010000001 '"
b100110010000001 ("
1!
#100
b110010 I
b110010 P
b110010 G
b110010 _
b10 X
b110010 Z
b110010000 [
b10 ]
b0 \
b100110010000001 F
b100110010000001 M
b100110010000001 V
0!
#101
b100 Y
1>
0@
b100 g
b11 h
b11 3
b11 f
#105
b110010 (
b110010 /
b110010 y
b110010 D
b110010 Q
1!
#110
0!
#111
b110010 -
b110010 N
b110010 1
b110010 k
b110010 H
b110010 U
b0 K
b0 T
b110010 J
b110010 S
b101 Y
1?
b0 ;
b0 b
b10 <
b10 a
0>
b101 g
b100 h
b100 3
b100 f
#115
b11001 '
b11001 z
b11001 $"
b11001 }
b110010 ,
b110010 .
b110010 v
b110010 E
b110010 O
1!
#120
0!
#121
b110 Y
0?
b110 g
b101 h
b101 3
b101 f
#125
bx *
bx C
bx L
bx x
bx ""
bx %
bx ~
bx '"
bx ("
1!
#130
0!
#131
b1100100 I
b1100100 P
b1100100 -
b1100100 N
b1100100 1
b1100100 k
b1100100 H
b1100100 U
b11 &
b11 {
b11 %"
b11 !"
b110010 #
b110010 |
b110010 &"
b110010 #"
b0 6
b0 u
b1100100 8
b1100100 t
b0 K
b0 T
b1100100 J
b1100100 S
b111 Y
1$
1)
1:
1>
b1 ;
b1 b
b0 <
b0 a
b0 5
b0 d
b0 j
b1 7
b1 c
b1 i
b10 =
b10 `
b111 g
b110 h
b110 3
b110 f
#135
b1100100 #
b1100100 |
b1100100 &"
b1100100 #"
b1100100 (
b1100100 /
b1100100 y
b1100100 D
b1100100 Q
1!
#140
0!
#141
b1 Y
b1 g
b111 h
b111 3
b111 f
#145
b110010 *
b110010 C
b110010 L
b110010 x
b110010 ""
b110010 %
b110010 ~
b110010 '"
b110010 ("
1!
#150
0!
#151
b100 -
b100 N
b100 1
b100 k
b100 H
b100 U
b100 K
b100 T
b0 J
b0 S
b100 6
b100 u
b0 8
b0 t
b110010 I
b110010 P
b10 Y
1@
1A
1?
b111 5
b111 d
b111 j
b0 7
b0 c
b0 i
b0 =
b0 `
0$
0)
0:
0>
b10 g
b1 h
b1 3
b1 f
#155
b10 '
b10 z
b10 $"
b10 }
b100 ,
b100 .
b100 v
b100 E
b100 O
b1100100 *
b1100100 C
b1100100 L
b1100100 x
b1100100 ""
b1100100 %
b1100100 ~
b1100100 '"
b1100100 ("
1!
#160
b1 I
b1 P
b110 -
b110 N
b110 1
b110 k
b110 H
b110 U
1A
1?
1@
b1 G
b1 _
b110 K
b110 T
b0 X
b1 Z
b1100 [
b1 ]
b100 \
b100 W
b110 6
b110 u
b1100100 F
b1100100 M
b1100100 V
b110 s
0!
#161
b11 Y
0A
0?
b11 g
b10 h
b10 3
b10 f
#165
b1111111111111111 *
b1111111111111111 C
b1111111111111111 L
b1111111111111111 x
b1111111111111111 ""
b1111111111111111 %
b1111111111111111 ~
b1111111111111111 '"
b1111111111111111 ("
1!
#170
b0 I
b0 P
b0 G
b0 _
b111 X
b1111111 Z
b1111111111 [
b111 ]
b111 \
b111 W
b1111111111111111 F
b1111111111111111 M
b1111111111111111 V
0!
#171
b100 Y
0@
b100 g
b11 h
b11 3
b11 f
#175
1!
#180
0!
#181
b101 Y
b101 g
b100 h
b100 3
b100 f
#185
1!
#190
0!
#191
b110 Y
b110 g
b101 h
b101 3
b101 f
#195
1!
#200
0!
