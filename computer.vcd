$date
	Tue Mar 14 20:52:26 2017
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module computer_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module U0 $end
$var wire 1 ! clock_50_b7a $end
$var wire 16 # RAMwrite [15:0] $end
$var wire 1 $ RAMwe $end
$var wire 16 % RAMread [15:0] $end
$var wire 2 & RAMbe [1:0] $end
$var wire 16 ' RAMaddr [15:0] $end
$var wire 16 ( CPUwrite [15:0] $end
$var wire 1 ) CPUwe $end
$var wire 16 * CPUread [15:0] $end
$var wire 1 + CPUbe $end
$var wire 16 , CPUaddr [15:0] $end
$scope module cpu $end
$var wire 16 - MARin [15:0] $end
$var wire 16 . RAMaddr [15:0] $end
$var wire 16 / RAMin [15:0] $end
$var wire 1 ! clk $end
$var wire 1 0 incr_pc_out $end
$var wire 1 1 incr_pc_temp $end
$var wire 1 2 loadneg $end
$var wire 16 3 regw [15:0] $end
$var wire 1 4 reset $end
$var wire 1 ) we $end
$var wire 4 5 state [3:0] $end
$var wire 3 6 regws [2:0] $end
$var wire 3 7 regr1s [2:0] $end
$var wire 16 8 regr1 [15:0] $end
$var wire 3 9 regr0s [2:0] $end
$var wire 16 : regr0 [15:0] $end
$var wire 1 ; reg_load $end
$var wire 1 < ram_load $end
$var wire 2 = op1s [1:0] $end
$var wire 2 > op0s [1:0] $end
$var wire 2 ? mdrs [1:0] $end
$var wire 1 @ mdr_load $end
$var wire 1 A mar_load $end
$var wire 1 B ir_load $end
$var wire 1 C incr_pc $end
$var wire 1 D cond_chk $end
$var wire 3 E cond [2:0] $end
$var wire 1 + be $end
$var wire 16 F RAMout [15:0] $end
$var wire 16 G MDRout [15:0] $end
$var wire 16 H MARout [15:0] $end
$var wire 16 I IRout [15:0] $end
$var wire 16 J IRimm [15:0] $end
$var wire 16 K ALUout [15:0] $end
$var wire 3 L ALUfunc [2:0] $end
$var reg 16 M MDRin [15:0] $end
$var reg 16 N op0 [15:0] $end
$var reg 16 O op1 [15:0] $end
$var reg 1 P skip $end
$scope module IR $end
$var wire 1 ! clk $end
$var wire 1 4 reset $end
$var wire 1 B load $end
$var wire 16 Q in [15:0] $end
$var reg 16 R out [15:0] $end
$upscope $end
$scope module MAR $end
$var wire 1 ! clk $end
$var wire 16 S in [15:0] $end
$var wire 1 4 reset $end
$var wire 1 A load $end
$var reg 16 T out [15:0] $end
$upscope $end
$scope module MDR $end
$var wire 1 ! clk $end
$var wire 16 U in [15:0] $end
$var wire 1 4 reset $end
$var wire 1 @ load $end
$var reg 16 V out [15:0] $end
$upscope $end
$scope module alu $end
$var wire 16 W x [15:0] $end
$var wire 16 X y [15:0] $end
$var wire 3 Y f [2:0] $end
$var reg 16 Z out [15:0] $end
$upscope $end
$scope module decoder $end
$var wire 1 + BE $end
$var wire 1 C INCR_PC $end
$var wire 1 B IR_LOAD $end
$var wire 1 A MAR_LOAD $end
$var wire 1 @ MDR_LOAD $end
$var wire 1 < RAM_LOAD $end
$var wire 1 ; REG_LOAD $end
$var wire 1 ! clk $end
$var wire 16 [ instr [15:0] $end
$var wire 1 \ loadneg $end
$var wire 1 4 reset $end
$var wire 4 ] xregws [3:0] $end
$var wire 4 ^ xregr1s [3:0] $end
$var wire 4 _ xregr0s [3:0] $end
$var wire 2 ` tgt2 [1:0] $end
$var wire 3 a tgt [2:0] $end
$var wire 2 b skipstate [1:0] $end
$var wire 2 c opcodeshort [1:0] $end
$var wire 6 d opcodelong [5:0] $end
$var wire 4 e next_state [3:0] $end
$var wire 1 f loadpos $end
$var wire 4 g imms [3:0] $end
$var wire 8 h imm7 [7:0] $end
$var wire 13 i imm13 [12:0] $end
$var wire 10 j imm10 [9:0] $end
$var wire 2 k condtype [1:0] $end
$var wire 1 l codetype $end
$var wire 3 m arg1 [2:0] $end
$var wire 3 n arg0 [2:0] $end
$var wire 40 o ROMread [39:0] $end
$var wire 2 p OP1S [1:0] $end
$var wire 2 q OP0S [1:0] $end
$var wire 2 r MDRS [1:0] $end
$var wire 1 D COND_CHK $end
$var wire 3 s ALUfunc [2:0] $end
$var reg 16 t IRimm [15:0] $end
$var reg 3 u REGR0S [2:0] $end
$var reg 3 v REGR1S [2:0] $end
$var reg 3 w REGWS [2:0] $end
$var reg 8 x ROMaddr [7:0] $end
$var reg 3 y cond [2:0] $end
$var reg 16 z immir [15:0] $end
$var reg 6 { opcode [5:0] $end
$var reg 4 | state [3:0] $end
$scope function fsm_function $end
$var reg 4 } fsm_function [3:0] $end
$var reg 3 ~ skipstate [2:0] $end
$var reg 4 !" state [3:0] $end
$upscope $end
$scope module micro $end
$var wire 8 "" address [7:0] $end
$var wire 40 #" data [39:0] $end
$upscope $end
$upscope $end
$scope module regfile $end
$var wire 1 ! clk $end
$var wire 1 + he $end
$var wire 1 0 incr_pc $end
$var wire 3 $" regr0s [2:0] $end
$var wire 3 %" regr1s [2:0] $end
$var wire 16 &" regw [15:0] $end
$var wire 3 '" regws [2:0] $end
$var wire 1 4 reset $end
$var wire 1 ; we $end
$var reg 16 (" R1 [15:0] $end
$var reg 16 )" R2 [15:0] $end
$var reg 16 *" R3 [15:0] $end
$var reg 16 +" R4 [15:0] $end
$var reg 16 ," R5 [15:0] $end
$var reg 16 -" R6 [15:0] $end
$var reg 16 ." R7 [15:0] $end
$var reg 16 /" regr0 [15:0] $end
$var reg 16 0" regr1 [15:0] $end
$upscope $end
$upscope $end
$scope module mem_io $end
$var wire 16 1" CPUaddr [15:0] $end
$var wire 1 + CPUbe $end
$var wire 16 2" CPUread [15:0] $end
$var wire 1 ) CPUwe $end
$var wire 16 3" CPUwrite [15:0] $end
$var wire 16 4" RAMaddr [15:0] $end
$var wire 2 5" RAMbe [1:0] $end
$var wire 1 $ RAMwe $end
$var wire 16 6" RAMwrite [15:0] $end
$var wire 16 7" addr [15:0] $end
$var wire 16 8" RAMread [15:0] $end
$var reg 2 9" be [1:0] $end
$var reg 16 :" data [15:0] $end
$var reg 16 ;" wdata [15:0] $end
$upscope $end
$scope module ram $end
$var wire 16 <" address [15:0] $end
$var wire 2 =" be [1:0] $end
$var wire 1 ! clk $end
$var wire 16 >" data_in [15:0] $end
$var wire 16 ?" data_out [15:0] $end
$var wire 1 $ we $end
$var reg 16 @" temp [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module computer_tb $end
$scope module U0 $end
$scope module ram $end
$var reg 16 A" \memory[0] [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module computer_tb $end
$scope module U0 $end
$scope module ram $end
$var reg 16 B" \memory[1] [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module computer_tb $end
$scope module U0 $end
$scope module ram $end
$var reg 16 C" \memory[2] [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module computer_tb $end
$scope module U0 $end
$scope module ram $end
$var reg 16 D" \memory[3] [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module computer_tb $end
$scope module U0 $end
$scope module ram $end
$var reg 16 E" \memory[4] [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module computer_tb $end
$scope module U0 $end
$scope module ram $end
$var reg 16 F" \memory[5] [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module computer_tb $end
$scope module U0 $end
$scope module ram $end
$var reg 16 G" \memory[6] [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module computer_tb $end
$scope module U0 $end
$scope module ram $end
$var reg 16 H" \memory[7] [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module computer_tb $end
$scope module U0 $end
$scope module ram $end
$var reg 16 I" \memory[8] [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx I"
bx H"
bx G"
bx F"
bx E"
bx D"
bx C"
b1011110101110100 B"
b10111110001 A"
bx @"
bx ?"
b0 >"
b11 ="
b0 <"
b0 ;"
bx :"
b11 9"
bx 8"
b0 7"
b0 6"
b11 5"
b0 4"
b0 3"
bx 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
b11 ""
b0 !"
b0 ~
b1 }
b0 |
b0 {
b1 z
b0 y
b11 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
0l
b0 k
b0 j
b0 i
b0 h
b0 g
0f
b1 e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
b0 ^
b0 ]
1\
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b0 T
b0 S
b0 R
bx Q
0P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
bx F
b0 E
0D
0C
0B
0A
0@
b0 ?
b0 >
b0 =
0<
0;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
z4
b0 3
12
01
00
b0 /
b0 .
b0 -
b0 ,
0+
bx *
0)
b0 (
b0 '
b11 &
bx %
0$
b0 #
0"
0!
$end
#1
1A
b111 7
b111 v
b111 %"
b1 >
b1 q
b111 ^
0\
02
b1100010000000111000000000010000000000000 o
b1100010000000111000000000010000000000000 #"
b10 x
b10 ""
b10 e
b10 }
b1 !"
1f
b1 5
b1 |
#5
b10111110001 *
b10111110001 F
b10111110001 Q
b10111110001 2"
b10111110001 :"
b10111110001 %
b10111110001 8"
b10111110001 ?"
b10111110001 @"
1!
#10
0!
#11
10
11
1B
1C
0A
1\
12
b1100010000000111000000000010000000000000 o
b1100010000000111000000000010000000000000 #"
b10 x
b10 ""
b11 e
b11 }
b10 !"
0f
b10 5
b10 |
#15
1!
#20
b1111111101111100 M
b1111111101111100 U
b10 -
b10 S
b10 3
b10 &"
b10 K
b10 Z
b1111111101111100 J
b1111111101111100 t
b1111111111111111 z
b1100010000000111000000000010000000000000 o
b1100010000000111000000000010000000000000 #"
b10 x
b10 ""
b10 N
b10 W
b10 d
b1111100 h
b10111110 j
b10111110001 i
b111 n
b110 m
b1 a
b1 `
b10 8
b10 0"
b10111110001 I
b10111110001 R
b10111110001 [
b10 ."
0!
#21
b0 -
b0 S
b0 3
b0 &"
b0 K
b0 Z
b0 8
b0 0"
01
1@
b1 ~
b0 N
b0 W
b10111110 M
b10111110 U
b10111110 J
b10111110 t
b0 7
b0 v
b0 %"
0B
0C
00
b1 b
b1 g
b10 >
b10 q
b0 ^
0A
0\
02
b10000000000000000000001100000000001000 o
b10000000000000000000001100000000001000 #"
b0 x
b0 ""
b100 e
b100 }
b11 !"
1f
b11 5
b11 |
#25
b10111110 -
b10111110 S
b10111110 3
b10111110 &"
b10111110 K
b10111110 Z
b10111110 N
b10111110 W
b10111110 #
b10111110 6"
b10111110 >"
b10111110 ;"
b10111110 (
b10111110 /
b10111110 3"
b10111110 G
b10111110 V
1!
#30
0!
#31
0@
1\
12
b10000000000000000000001100000000001000 o
b10000000000000000000001100000000001000 #"
b0 x
b0 ""
b111 e
b111 }
b100 !"
0f
b100 5
b100 |
#35
1!
#40
0!
#41
b1111111101111100 M
b1111111101111100 U
b0 ~
b1111111101111100 J
b1111111101111100 t
b1 6
b1 w
b1 '"
b1010 ]
b0 b
b0 g
0@
0\
02
b1000000000000101000000100000000000000 o
b1000000000000101000000100000000000000 #"
b10000000 x
b10000000 ""
b1000 e
b1000 }
b111 !"
1f
b111 5
b111 |
#45
1!
#50
0!
#51
1;
1\
12
b1000000000000101000000100000000000000 o
b1000000000000101000000100000000000000 #"
b10000000 x
b10000000 ""
b1 e
b1 }
b1000 !"
0f
b1000 5
b1000 |
#55
1!
#60
b10111110 ("
0!
#61
b10 -
b10 S
b10 3
b10 &"
b10 K
b10 Z
b10 8
b10 0"
1A
b10 N
b10 W
b0 6
b0 w
b0 '"
b111 7
b111 v
b111 %"
0;
b111 ^
b1 >
b1 q
b0 ]
0\
02
b1100010000000111000000000010000000000000 o
b1100010000000111000000000010000000000000 #"
b10 x
b10 ""
b10 e
b10 }
b1 !"
1f
b1 5
b1 |
#65
b1 '
b1 4"
b1 <"
b1 7"
b10 ,
b10 .
b10 1"
b10 H
b10 T
1!
#70
0!
#71
10
11
1B
1C
0A
1\
12
b1100010000000111000000000010000000000000 o
b1100010000000111000000000010000000000000 #"
b10 x
b10 ""
b11 e
b11 }
b10 !"
0f
b10 5
b10 |
#75
b1011110101110100 *
b1011110101110100 F
b1011110101110100 Q
b1011110101110100 2"
b1011110101110100 :"
b1011110101110100 %
b1011110101110100 8"
b1011110101110100 ?"
b1011110101110100 @"
1!
#80
b1111111101011101 M
b1111111101011101 U
b100 -
b100 S
b100 3
b100 &"
b100 K
b100 Z
b1111111101011101 J
b1111111101011101 t
b1111111111111100 z
b11110 {
b1100010000000111000000000010000000000000 o
b1100010000000111000000000010000000000000 #"
b10 x
b10 ""
b100 N
b100 W
1l
b11110 d
b1 c
b1011101 h
b1110101110 j
b1110101110100 i
b101 n
b100 a
b0 `
b100 8
b100 0"
b1011110101110100 I
b1011110101110100 R
b1011110101110100 [
b100 ."
0!
#81
b0 -
b0 S
b0 3
b0 &"
b0 K
b0 Z
b0 8
b0 0"
01
1@
b1 ~
b0 N
b0 W
b1011101 M
b1011101 U
b1011101 J
b1011101 t
b0 7
b0 v
b0 %"
0B
0C
00
b1 b
b100 g
b0 >
b0 q
b0 ^
0A
0\
02
b10000000000000000000100000000000001000 o
b10000000000000000000100000000000001000 #"
b11110 x
b11110 ""
b100 e
b100 }
b11 !"
1f
b11 5
b11 |
#85
b1011101 #
b1011101 6"
b1011101 >"
b1011101 ;"
b1011101 (
b1011101 /
b1011101 3"
b1011101 G
b1011101 V
1!
#90
0!
#91
0@
1\
12
b10000000000000000000100000000000001000 o
b10000000000000000000100000000000001000 #"
b11110 x
b11110 ""
b111 e
b111 }
b100 !"
0f
b100 5
b100 |
#95
1!
#100
0!
#101
b1011101 -
b1011101 S
b1011101 3
b1011101 &"
b1011101 K
b1011101 Z
b1011101 N
b1011101 W
b1111111101011101 M
b1111111101011101 U
b0 ~
b1111111101011101 J
b1111111101011101 t
b1 6
b1 w
b1 '"
b1 =
b1 p
b10 >
b10 q
b1011 ]
b0 b
b0 g
0@
0\
02
b1000100000000101100000100100000000000 o
b1000100000000101100000100100000000000 #"
b10011110 x
b10011110 ""
b1000 e
b1000 }
b111 !"
1f
b111 5
b111 |
#105
1!
#110
0!
#111
b10111101 *
b10111101 F
b10111101 Q
b10111101 2"
b10111101 :"
1;
1+
1\
12
b1000100000000101100000100100000000000 o
b1000100000000101100000100100000000000 #"
b10011110 x
b10011110 ""
b1 e
b1 }
b1000 !"
0f
b1000 5
b1000 |
#115
1!
#120
b1011101010111110 ("
0!
#121
b100 -
b100 S
b100 3
b100 &"
b100 K
b100 Z
b100 8
b100 0"
b1011110101110100 *
b1011110101110100 F
b1011110101110100 Q
b1011110101110100 2"
b1011110101110100 :"
1A
b100 N
b100 W
b0 6
b0 w
b0 '"
b111 7
b111 v
b111 %"
0;
0+
b111 ^
b0 =
b0 p
b1 >
b1 q
b0 ]
0\
02
b1100010000000111000000000010000000000000 o
b1100010000000111000000000010000000000000 #"
b10 x
b10 ""
b10 e
b10 }
b1 !"
1f
b1 5
b1 |
#125
b10 '
b10 4"
b10 <"
b10 7"
b100 ,
b100 .
b100 1"
b100 H
b100 T
1!
#130
0!
#131
10
11
1B
1C
0A
1\
12
b1100010000000111000000000010000000000000 o
b1100010000000111000000000010000000000000 #"
b10 x
b10 ""
b11 e
b11 }
b10 !"
0f
b10 5
b10 |
#135
bx *
bx F
bx Q
bx 2"
bx :"
bx %
bx 8"
bx ?"
bx @"
1!
#140
bx0xxxxxxx M
bx0xxxxxxx U
b110 -
b110 S
b110 3
b110 &"
b110 K
b110 Z
bx0xxxxxxx J
bx0xxxxxxx t
bx {
b1100010000000111000000000010000000000000 o
b1100010000000111000000000010000000000000 #"
b10 x
b10 ""
b110 N
b110 W
xl
bx d
bx c
b0xxxxxxx h
bx j
bx i
bx n
bx m
bx a
bx `
b110 8
b110 0"
bx I
bx R
bx [
b110 ."
0!
#141
01
x@
b0xx ~
b110 O
b110 X
b0 N
b0 W
b0 M
b0 U
b0 J
b0 t
bx 6
bx w
bx '"
bx 7
bx v
bx %"
bx 9
bx u
bx $"
0B
0C
00
bx b
bx L
bx Y
bx s
xD
bx k
bx =
bx p
b0xxx g
bx ?
bx r
bx ]
bx _
bx >
bx q
bx ^
xA
0\
02
bx o
bx #"
b0xxxxxx x
b0xxxxxx ""
b100 e
b100 }
b11 !"
1f
b11 5
b11 |
#145
1!
#150
0!
#151
x0
x1
xB
x;
x$
x)
x<
xC
x+
0@
0A
1\
12
bx o
bx #"
b0xxxxxx x
b0xxxxxx ""
b100 !"
0f
b100 5
b100 |
#155
1!
#160
0!
#165
1!
#170
0!
#175
1!
#180
0!
#185
1!
#190
0!
#195
1!
#200
0!
#205
1!
#210
0!
#215
1!
#220
0!
#225
1!
#230
0!
#235
1!
#240
0!
#245
1!
#250
0!
#255
1!
#260
0!
#265
1!
#270
0!
#275
1!
#280
0!
#285
1!
#290
0!
#295
1!
#300
0!
#305
1!
#310
0!
#315
1!
#320
0!
#325
1!
#330
0!
#335
1!
#340
0!
#345
1!
#350
0!
#355
1!
#360
0!
#365
1!
#370
0!
#375
1!
#380
0!
#385
1!
#390
0!
#395
1!
#400
0!
#405
1!
#410
0!
#415
1!
#420
0!
#425
1!
#430
0!
#435
1!
#440
0!
#445
1!
#450
0!
#455
1!
#460
0!
#465
1!
#470
0!
#475
1!
#480
0!
#485
1!
#490
0!
#495
1!
#500
0!
#505
1!
#510
0!
#515
1!
#520
0!
#525
1!
#530
0!
#535
1!
#540
0!
#545
1!
#550
0!
#555
1!
#560
0!
#565
1!
#570
0!
#575
1!
#580
0!
#585
1!
#590
0!
#595
1!
#600
0!
#605
1!
#610
0!
#615
1!
#620
0!
#625
1!
#630
0!
#635
1!
#640
0!
#645
1!
#650
0!
#655
1!
#660
0!
#665
1!
#670
0!
#675
1!
#680
0!
#685
1!
#690
0!
#695
1!
#700
0!
#705
1!
#710
0!
#715
1!
#720
0!
#725
1!
#730
0!
#735
1!
#740
0!
#745
1!
#750
0!
#755
1!
#760
0!
#765
1!
#770
0!
#775
1!
#780
0!
#785
1!
#790
0!
#795
1!
#800
0!
#805
1!
#810
0!
#815
1!
#820
0!
#825
1!
#830
0!
#835
1!
#840
0!
#845
1!
#850
0!
#855
1!
#860
0!
#865
1!
#870
0!
#875
1!
#880
0!
#885
1!
#890
0!
#895
1!
#900
0!
#905
1!
#910
0!
#915
1!
#920
0!
#925
1!
#930
0!
#935
1!
#940
0!
#945
1!
#950
0!
#955
1!
#960
0!
#965
1!
#970
0!
#975
1!
#980
0!
#985
1!
#990
0!
#995
1!
#1000
0!
