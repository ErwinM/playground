$date
	Sun Feb 26 19:31:36 2017
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module computer_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module U0 $end
$var wire 1 ! clk $end
$var wire 1 # we $end
$var wire 16 $ RAMout [15:0] $end
$var wire 16 % RAMin [15:0] $end
$var wire 16 & RAMaddr [15:0] $end
$scope module cpu $end
$var wire 16 ' MARin [15:0] $end
$var wire 16 ( RAMaddr [15:0] $end
$var wire 16 ) RAMin [15:0] $end
$var wire 1 ! clk $end
$var wire 3 * f [2:0] $end
$var wire 16 + regw [15:0] $end
$var wire 1 , reset $end
$var wire 1 # we $end
$var wire 3 - regws [2:0] $end
$var wire 3 . regr1s [2:0] $end
$var wire 16 / regr1 [15:0] $end
$var wire 3 0 regr0s [2:0] $end
$var wire 16 1 regr0 [15:0] $end
$var wire 1 2 reg_load $end
$var wire 1 3 ram_load $end
$var wire 2 4 op1s [1:0] $end
$var wire 2 5 op0s [1:0] $end
$var wire 2 6 mdrs [1:0] $end
$var wire 1 7 mdr_load $end
$var wire 1 8 mar_load $end
$var wire 1 9 ir_load $end
$var wire 1 : incr_pc $end
$var wire 16 ; RAMout [15:0] $end
$var wire 16 < MDRout [15:0] $end
$var wire 16 = MARout [15:0] $end
$var wire 16 > IRout [15:0] $end
$var wire 13 ? IRimm [12:0] $end
$var wire 16 @ ALUout [15:0] $end
$var reg 16 A MDRin [15:0] $end
$var reg 16 B op0 [15:0] $end
$var reg 16 C op1 [15:0] $end
$scope module IR $end
$var wire 1 ! clk $end
$var wire 1 , reset $end
$var wire 1 9 load $end
$var wire 16 D in [15:0] $end
$var reg 16 E out [15:0] $end
$upscope $end
$scope module MAR $end
$var wire 1 ! clk $end
$var wire 16 F in [15:0] $end
$var wire 1 , reset $end
$var wire 1 8 load $end
$var reg 16 G out [15:0] $end
$upscope $end
$scope module MDR $end
$var wire 1 ! clk $end
$var wire 16 H in [15:0] $end
$var wire 1 , reset $end
$var wire 1 7 load $end
$var reg 16 I out [15:0] $end
$upscope $end
$scope module alu $end
$var wire 3 J f [2:0] $end
$var wire 16 K x [15:0] $end
$var wire 16 L y [15:0] $end
$var reg 16 M out [15:0] $end
$upscope $end
$scope module decoder $end
$var wire 1 ! clk $end
$var wire 3 N tgt [2:0] $end
$var wire 3 O opc0 [2:0] $end
$var wire 4 P next_state [3:0] $end
$var wire 16 Q instr [15:0] $end
$var wire 11 R imm10 [10:0] $end
$var reg 1 : INCR_PC $end
$var reg 1 9 IR_LOAD $end
$var reg 13 S IRimm [12:0] $end
$var reg 1 8 MAR_LOAD $end
$var reg 2 T MDRS [1:0] $end
$var reg 1 7 MDR_LOAD $end
$var reg 2 U OP0S [1:0] $end
$var reg 2 V OP1S [1:0] $end
$var reg 1 3 RAM_LOAD $end
$var reg 3 W REGR0S [2:0] $end
$var reg 3 X REGR1S [2:0] $end
$var reg 3 Y REGWS [2:0] $end
$var reg 1 2 REG_LOAD $end
$var reg 4 Z state [3:0] $end
$scope function fsm_function $end
$var reg 4 [ fsm_function [3:0] $end
$var reg 4 \ state [3:0] $end
$upscope $end
$upscope $end
$scope module regfile $end
$var wire 1 ! clk $end
$var wire 1 : incr_pc $end
$var wire 3 ] regr0s [2:0] $end
$var wire 3 ^ regr1s [2:0] $end
$var wire 16 _ regw [15:0] $end
$var wire 3 ` regws [2:0] $end
$var wire 1 2 we $end
$var reg 16 a R1 [15:0] $end
$var reg 16 b R2 [15:0] $end
$var reg 16 c R3 [15:0] $end
$var reg 16 d R4 [15:0] $end
$var reg 16 e R5 [15:0] $end
$var reg 16 f R6 [15:0] $end
$var reg 16 g R7 [15:0] $end
$var reg 16 h regr0 [15:0] $end
$var reg 16 i regr1 [15:0] $end
$upscope $end
$upscope $end
$scope module ram $end
$var wire 16 j address [15:0] $end
$var wire 1 ! clk $end
$var wire 16 k data_in [15:0] $end
$var wire 1 # we $end
$var wire 16 l data_out [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx l
bx k
bx j
bx i
b0 h
b0 g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
b0 \
b1 [
b0 Z
bx Y
bx X
bx W
bx V
bx U
bx T
b0 S
b0xxxxxxxxxx R
bx Q
b1 P
bx O
bx N
bx M
bx L
bx K
bz J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
b0 ?
bx >
bx =
bx <
bx ;
0:
09
08
07
bx 6
bx 5
bx 4
x3
02
b0 1
bx 0
bx /
bx .
bx -
z,
bx +
bz *
bx )
bx (
bx '
bx &
bx %
bx $
x#
0"
0!
$end
#5
1!
#6
b0 '
b0 F
b0 +
b0 _
b0 @
b0 M
b0 C
b0 L
b0 /
b0 i
b0 B
b0 K
b0 A
b0 H
19
1:
18
b1 4
b1 V
b111 .
b111 X
b111 ^
b0 0
b0 W
b0 ]
b0 5
b0 U
b0 6
b0 T
b10 P
b10 [
b1 \
b1 Z
#10
b10 '
b10 F
b10 +
b10 _
b10 @
b10 M
b10 C
b10 L
b1100100 A
b1100100 H
1:
19
18
b1100100 ?
b1100100 S
b10 /
b10 i
b101 O
b10 N
b1100100 R
b10 g
b1010001100100010 $
b1010001100100010 ;
b1010001100100010 D
b1010001100100010 Q
b1010001100100010 l
b0 &
b0 (
b0 j
b0 =
b0 G
0!
#15
b1010001100100010 >
b1010001100100010 E
1!
#16
bx '
bx F
bx +
bx _
bx @
bx M
bx B
bx K
17
b10 5
b10 U
0:
09
08
b100 P
b100 [
b10 \
b10 Z
#20
b1100110 '
b1100110 F
b1100110 +
b1100110 _
b1100110 @
b1100110 M
b1100100 B
b1100100 K
b1100100 %
b1100100 )
b1100100 k
b1100100 <
b1100100 I
0!
#25
1!
#26
07
b1000 P
b1000 [
b100 \
b100 Z
#30
0!
#35
1!
#36
b1100100 '
b1100100 F
b1100100 +
b1100100 _
b1100100 @
b1100100 M
b0 C
b0 L
12
b10 -
b10 Y
b10 `
b0 4
b0 V
b1 P
b1 [
b1000 \
b1000 Z
#40
b1100100 b
0!
#45
1!
#46
b10 '
b10 F
b10 +
b10 _
b10 @
b10 M
b10 C
b10 L
b0 B
b0 K
19
1:
18
b1 4
b1 V
b0 5
b0 U
02
b10 P
b10 [
b1 \
b1 Z
#50
b100 '
b100 F
b100 +
b100 _
b100 @
b100 M
b100 C
b100 L
b1000100 A
b1000100 H
1:
19
18
b1000100 ?
b1000100 S
b100 /
b100 i
b1000100 R
b100 N
b100 g
b1010001000100100 $
b1010001000100100 ;
b1010001000100100 D
b1010001000100100 Q
b1010001000100100 l
b10 &
b10 (
b10 j
b10 =
b10 G
0!
#55
b1010001000100100 >
b1010001000100100 E
1!
#56
b1101000 '
b1101000 F
b1101000 +
b1101000 _
b1101000 @
b1101000 M
b1100100 B
b1100100 K
17
b10 5
b10 U
0:
09
08
b100 P
b100 [
b10 \
b10 Z
#60
b1001000 '
b1001000 F
b1001000 +
b1001000 _
b1001000 @
b1001000 M
b1000100 B
b1000100 K
b1000100 %
b1000100 )
b1000100 k
b1000100 <
b1000100 I
0!
#65
1!
#66
07
b1000 P
b1000 [
b100 \
b100 Z
#70
0!
#75
1!
#76
b1000100 '
b1000100 F
b1000100 +
b1000100 _
b1000100 @
b1000100 M
b0 C
b0 L
12
b100 -
b100 Y
b100 `
b0 4
b0 V
b1 P
b1 [
b1000 \
b1000 Z
#80
b1000100 d
0!
#85
1!
#86
b100 '
b100 F
b100 +
b100 _
b100 @
b100 M
b100 C
b100 L
b0 B
b0 K
19
1:
18
b1 4
b1 V
b0 5
b0 U
02
b10 P
b10 [
b1 \
b1 Z
#90
b110 '
b110 F
b110 +
b110 _
b110 @
b110 M
b110 C
b110 L
b0 A
b0 H
1:
19
18
b0 ?
b0 S
b110 /
b110 i
bx O
bx N
b0xxxxxxxxxx R
b110 g
bx $
bx ;
bx D
bx Q
bx l
b100 &
b100 (
b100 j
b100 =
b100 G
0!
#95
bx >
bx E
1!
#96
0:
09
08
b100 P
b100 [
b10 \
b10 Z
#100
0!
